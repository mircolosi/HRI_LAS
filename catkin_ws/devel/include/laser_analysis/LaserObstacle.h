// Generated by gencpp from file laser_analysis/LaserObstacle.msg
// DO NOT EDIT!


#ifndef LASER_ANALYSIS_MESSAGE_LASEROBSTACLE_H
#define LASER_ANALYSIS_MESSAGE_LASEROBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser_analysis
{
template <class ContainerAllocator>
struct LaserObstacle_
{
  typedef LaserObstacle_<ContainerAllocator> Type;

  LaserObstacle_()
    : stamp()
    , npoints(0)
    , mindist(0.0)
    , y1(0.0)
    , y2(0.0)  {
    }
  LaserObstacle_(const ContainerAllocator& _alloc)
    : stamp()
    , npoints(0)
    , mindist(0.0)
    , y1(0.0)
    , y2(0.0)  {
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _npoints_type;
  _npoints_type npoints;

   typedef double _mindist_type;
  _mindist_type mindist;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _y2_type;
  _y2_type y2;




  typedef boost::shared_ptr< ::laser_analysis::LaserObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_analysis::LaserObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct LaserObstacle_

typedef ::laser_analysis::LaserObstacle_<std::allocator<void> > LaserObstacle;

typedef boost::shared_ptr< ::laser_analysis::LaserObstacle > LaserObstaclePtr;
typedef boost::shared_ptr< ::laser_analysis::LaserObstacle const> LaserObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_analysis::LaserObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_analysis::LaserObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser_analysis

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'laser_analysis': ['/home/parallels/catkin_ws/src/laser_analysis/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser_analysis::LaserObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_analysis::LaserObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_analysis::LaserObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_analysis::LaserObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_analysis::LaserObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_analysis::LaserObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_analysis::LaserObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee9cd1755859dc1d90f8adb4433b5b03";
  }

  static const char* value(const ::laser_analysis::LaserObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee9cd1755859dc1dULL;
  static const uint64_t static_value2 = 0x90f8adb4433b5b03ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_analysis::LaserObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_analysis/LaserObstacle";
  }

  static const char* value(const ::laser_analysis::LaserObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_analysis::LaserObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
int32 npoints\n\
float64 mindist\n\
float64 y1\n\
float64 y2\n\
\n\
\n\
";
  }

  static const char* value(const ::laser_analysis::LaserObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_analysis::LaserObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.npoints);
      stream.next(m.mindist);
      stream.next(m.y1);
      stream.next(m.y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LaserObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_analysis::LaserObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_analysis::LaserObstacle_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "npoints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.npoints);
    s << indent << "mindist: ";
    Printer<double>::stream(s, indent + "  ", v.mindist);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_ANALYSIS_MESSAGE_LASEROBSTACLE_H
