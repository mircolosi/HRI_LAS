// Generated by gencpp from file rococo_navigation/FollowPersonGoal.msg
// DO NOT EDIT!


#ifndef ROCOCO_NAVIGATION_MESSAGE_FOLLOWPERSONGOAL_H
#define ROCOCO_NAVIGATION_MESSAGE_FOLLOWPERSONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rococo_navigation
{
template <class ContainerAllocator>
struct FollowPersonGoal_
{
  typedef FollowPersonGoal_<ContainerAllocator> Type;

  FollowPersonGoal_()
    : target_X(0.0)
    , target_Y(0.0)
    , max_vel(0.0)  {
    }
  FollowPersonGoal_(const ContainerAllocator& _alloc)
    : target_X(0.0)
    , target_Y(0.0)
    , max_vel(0.0)  {
    }



   typedef float _target_X_type;
  _target_X_type target_X;

   typedef float _target_Y_type;
  _target_Y_type target_Y;

   typedef float _max_vel_type;
  _max_vel_type max_vel;




  typedef boost::shared_ptr< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FollowPersonGoal_

typedef ::rococo_navigation::FollowPersonGoal_<std::allocator<void> > FollowPersonGoal;

typedef boost::shared_ptr< ::rococo_navigation::FollowPersonGoal > FollowPersonGoalPtr;
typedef boost::shared_ptr< ::rococo_navigation::FollowPersonGoal const> FollowPersonGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rococo_navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rococo_navigation': ['/home/parallels/catkin_ws/devel/share/rococo_navigation/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6213a78c6faf5ade64348156f926f0c1";
  }

  static const char* value(const ::rococo_navigation::FollowPersonGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6213a78c6faf5adeULL;
  static const uint64_t static_value2 = 0x64348156f926f0c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rococo_navigation/FollowPersonGoal";
  }

  static const char* value(const ::rococo_navigation::FollowPersonGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal\n\
# target person\n\
float32 target_X\n\
float32 target_Y\n\
# max velocity [m/s]\n\
float32 max_vel\n\
";
  }

  static const char* value(const ::rococo_navigation::FollowPersonGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_X);
      stream.next(m.target_Y);
      stream.next(m.max_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FollowPersonGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rococo_navigation::FollowPersonGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rococo_navigation::FollowPersonGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_X: ";
    Printer<float>::stream(s, indent + "  ", v.target_X);
    s << indent << "target_Y: ";
    Printer<float>::stream(s, indent + "  ", v.target_Y);
    s << indent << "max_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCOCO_NAVIGATION_MESSAGE_FOLLOWPERSONGOAL_H
